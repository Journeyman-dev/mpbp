// SPDX-FileCopyrightText: 2022 Daniel Valcour <fossweeper@gmail.com>
//
// SPDX-License-Identifier: MIT

/*!

@mainpage notitle

This site contains the documentation for the mpbp library. mpbp (<b>M</b>ulti-<b>P</b>age <b>B</b>in <b>P</b>acking library) is a free and open source library for bin packing written in C++ 20. It provides an easy to use bin packing algorithm with support for both offline and online packing. mpbp tries to optimally place Rects in multiple bins of a specific size in as few bins as possible. This system is designed for usage in creating sprite batch rendering systems that utilize more than one texture atlas page. 

Clone the library from GitHub: https://github.com/Journeyman-dev/mpbp

@section Usage

To use mpbp, you must first create a mpbp::Packer object and specify the maximum width and height of each bin page. This can be done in one programming statment using its overloaded constructor.

    int max_width = 32;
    int max_height = 16;
    mpbp::Packer::packer(max_width, max_height);

In order to pack, you must provide a <a href="https://en.cppreference.com/w/cpp/container/span">std::span</a> of mpbp::Rect. An easy way to do this is to store the mpbp::Rect objects in a <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>, which will be implicitly converted to a span when you pass it into the packing function. Construct each rect using the overloaded constructor with three arguments. For the first argument, pass in an `unsigned long int` identifier value which will be used to identify this Rect later. For the second and third arguments, pass in the width and height of the Rect.

      std::vector<mpbp::Rect> input_rects = {
        mpbp::Rect(0, 1, 1), mpbp::Rect(1, 2, 2),  mpbp::Rect(2, 4, 4), mpbp::Rect(3, 5, 5),
        mpbp::Rect(4, 7, 7), mpbp::Rect(5, 7, 7),  mpbp::Rect(6, 6, 6), mpbp::Rect(7, 9, 9),
        mpbp::Rect(8, 6, 6), mpbp::Rect(9, 30, 15)};

To perform a pack, pass vector of Rect objects into the mpbp::Packer::Pack() function.

    packer.Pack(input_rects);

After the Rect objects are packed, loop through them and use their getter functions to get their positions in the bin pages. You can use mpbp::Packer::GetPageCount() to get the total amount of pages that were packed. Remember that after packing, the Rect objects are no longer the same order in their container. To determine which Rect is which, check the identifier value that you set earlier, which you can get with the mpbp::Rect::GetIdentifier() function.

If you wish to pack more Rect objects with the Packer object, you can do so by creating a new container of Rect objects and calling the Pack function again. You can do this as many times as you like, but note that the more times you call the pack algorithm, the less space efficient it will be. Alternatively, you can clear the Packer object of all state data by calling the mpbp::Packer::Clear() function, and then you can pack your Rect objects again from scratch including any new additions.

You can find a complete example of mpbp in the example folder of the GitHub repostiroy.

*/
